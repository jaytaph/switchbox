<?php

namespace SwitchBox\DHT;

use phpecc\PublicKey;
use SwitchBox\KeyPair;
use SwitchBox\Stream;

class Node {
    protected $name;               // Hex string of hash / nodename
    protected $public_key;         // Public key of the node in PEM format
    protected $ip;                 // IP that connected
    protected $port;               // Port that connected

    protected $line_in = null;              // Line in string
    protected $line_out= null;              // Line out string

    /** @var PublicKey */
    protected $ecc;                         // Our generated ECC public key

    protected $encryption_key;              // Line encryption key
    protected $decryption_key;              // Line decryption key

    protected $streams = array();           // Array of currently running streams for this node


    protected $open_at;

    /**
     * @param mixed $open_at
     */
    public function setOpenAt($open_at)
    {
        $this->open_at = $open_at;
    }

    /**
     * @return mixed
     */
    public function getOpenAt()
    {
        return $this->open_at;
    }



    function __construct($ip, $port, $public_key = null, $hash = null) {

        if (! $public_key && ! $hash) {
            throw new \InvalidArgumentException("Either public key or hash must be filled");
        }

        if ($public_key) {
            $pubkey_hash = self::generateNodeName($public_key);
            if ($pubkey_hash != $hash && $hash != null) {
                throw new \InvalidArgumentException("Hash does not match public key!");
            }
            $this->setName($pubkey_hash);
            $this->setPublicKey($public_key);
        }

        if ($hash != null) {
            $this->setName($hash);
        }

        $this->setIp($ip);
        $this->setPort($port);

        $this->streams = array();
    }


    /**
     * @param $public_key
     * @return string
     */
    public static function generateNodeName($public_key)
    {
        return hash('sha256', KeyPair::convertPemToDer($public_key));
    }

    /**
     * Nodename, as generated by the public key
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * @return string
     */
    public function getIp()
    {
        return $this->ip;
    }

    /**
     * @return mixed
     */
    public function getPort()
    {
        return $this->port;
    }

    /**
     * @return mixed
     */
    public function getPublicKey()
    {
        return $this->public_key;
    }

    /**
     * @param mixed $public_key
     */
    public function setPublicKey($public_key)
    {
        $this->public_key = $public_key;
    }


    /**
     * @param $id
     * @return Stream|null
     */
    public function getStream($id)
    {
        return isset($this->streams[$id]) ? $this->streams[$id] : null;
    }

    function addStream(Stream $stream) {
        $this->streams[$stream->getId()] = $stream;
    }


    public function setName($name)
    {
        $this->name = $name;
    }

    /**
     * @param mixed $ip
     */
    public function setIp($ip)
    {
        $this->ip = $ip;
    }


    /**
     * @param mixed $line_in
     */
    public function setLineIn($line_in)
    {
        $this->line_in = $line_in;
    }

    /**
     * @return mixed
     */
    public function getLineIn()
    {
        return $this->line_in;
    }

    /**
     * @param mixed $line_out
     */
    public function setLineOut($line_out)
    {
        $this->line_out = $line_out;
    }

    /**
     * @return mixed
     */
    public function getLineOut()
    {
        return $this->line_out;
    }



    public function isConnected() {
        return ($this->line_out && $this->line_in);
    }

    /**
     * @param mixed $port
     */
    public function setPort($port)
    {
        $this->port = $port;
    }

    /**
     * @param mixed $decryption_key
     */
    public function setDecryptionKey($decryption_key)
    {
        $this->decryption_key = $decryption_key;
    }

    /**
     * @return mixed
     */
    public function getDecryptionKey()
    {
        return $this->decryption_key;
    }

    /**
     * @param mixed $encryption_key
     */
    public function setEncryptionKey($encryption_key)
    {
        $this->encryption_key = $encryption_key;
    }

    /**
     * @return mixed
     */
    public function getEncryptionKey()
    {
        return $this->encryption_key;
    }

    /**
     * @param \stdClass $ecc
     */
    public function setEcc(\stdClass $ecc)
    {
        $this->ecc = $ecc;
    }

    /**
     * @return \stdClass
     */
    public function getEcc()
    {
        return $this->ecc;
    }


//
//
//    public function addToBucket($bucketIdx, Node $node) {
//        if (! isset($this->buckets[$bucketIdx])) {
//            $this->buckets[$bucketIdx] = array();
//        }
//        $this->buckets[$bucketIdx][] = $node;
//        $node->setBucket($node, $bucketIdx);
//    }
//
//    function setBucket($bucketIdx) {
//        $this->bucket_idx = $bucketIdx;
//    }
//
//    function getBucket() {
//        return $this->bucket_idx;
//    }


    function __toString() {
        return $this->getIp().":".$this->getPort()." [".$this->getName()."]";
    }

}
